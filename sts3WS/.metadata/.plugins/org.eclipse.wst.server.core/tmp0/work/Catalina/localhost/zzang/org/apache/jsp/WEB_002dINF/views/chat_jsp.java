/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-08-21 01:48:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>초우간단 채팅</title>\r\n");
      out.write("<style>\r\n");
      out.write("	#id_chatwin {\r\n");
      out.write("		width:300px;\r\n");
      out.write("		height:300px;\r\n");
      out.write("		background-color:black;\r\n");
      out.write("		border:1px solid pink;\r\n");
      out.write("		color:yellow;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>간단히 억지롱 대화라도 할깡</h1>\r\n");
      out.write("	<div>\r\n");
      out.write("		<div id=\"id_chatwin\"></div>\r\n");
      out.write("		<input type=\"text\" id=\"id_message\" /> \r\n");
      out.write("		<input type=\"button\" id=\"id_send\" value=\"떤쏭\"> \r\n");
      out.write("		<input type=\"button\" id=\"id_exit\" value=\"나갈령\">\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("        //그냥 띰띰해서 맹근 랜덤 아이디 맹그는 함쑹\r\n");
      out.write("	    const c_alpha=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n");
      out.write("		const f_ranID=()=>{\r\n");
      out.write("			let ranID =\"\";\r\n");
      out.write("			for(let i=1; i< (Math.ceil(Math.random()*5)+4); i++){\r\n");
      out.write("				ranID += c_alpha[Math.floor(Math.random()*c_alpha.length)];\r\n");
      out.write("			}\r\n");
      out.write("			return ranID;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		let webSocket; // 페이지 바뀌면 변수가 사라진다는 사실에 주목할 필요가 있음\r\n");
      out.write("		let myId = f_ranID();\r\n");
      out.write("		const c_chatWin = document.querySelector(\"#id_chatwin\");\r\n");
      out.write("		const c_message = document.querySelector(\"#id_message\");		\r\n");
      out.write("		const c_send = document.querySelector(\"#id_send\");\r\n");
      out.write("		const c_exit = document.querySelector(\"#id_exit\");\r\n");
      out.write("\r\n");
      out.write("		c_send.addEventListener(\"click\", ()=>{\r\n");
      out.write("			send();\r\n");
      out.write("		});\r\n");
      out.write("		// 연결 끊깅\r\n");
      out.write("		c_exit.addEventListener(\"click\", function () {\r\n");
      out.write("			disconnect();\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		//연결\r\n");
      out.write("		connect();\r\n");
      out.write("		function connect() {\r\n");
      out.write("			webSocket = new WebSocket(\"ws://localhost:8080/zzang/ws-chat\"); // End Point\r\n");
      out.write("			//이벤트에 이벤트핸들러 뜽록 \r\n");
      out.write("			webSocket.onopen = fOpen; // 소켓 접속되면 짜똥 실행할 함수(fOpen)\r\n");
      out.write("			webSocket.onmessage = fMessage; // 써버에서 메쎄징 오면  짜똥 실행할 함수(fMessage) \r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		//연결 시\r\n");
      out.write("		function fOpen() {\r\n");
      out.write("			webSocket.send(myId + \"님 이프짱.\");\r\n");
      out.write("		} \r\n");
      out.write("		function send() {  // 써버로 메쎄찡 떤쏭하는 함수\r\n");
      out.write("			let msg = c_message.value;\r\n");
      out.write("			webSocket.send(myId + \":\" + msg);\r\n");
      out.write("			c_message.value = \"\";\r\n");
      out.write("		}\r\n");
      out.write("		function fMessage() {\r\n");
      out.write("			let data = event.data;\r\n");
      out.write("			c_chatWin.innerHTML = c_chatWin.innerHTML + \"<br/>\" + data;\r\n");
      out.write("		}\r\n");
      out.write("		function disconnect() { //써버와 인연 끊는 함쑹\r\n");
      out.write("			webSocket.send(myId + \"님이 뛰쳐나갔쪙\");\r\n");
      out.write("			webSocket.close();\r\n");
      out.write("		}\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
