/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-08-22 01:22:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class lkj_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<div id=\"disp\"></div>\r\n");
      out.write("<script>\r\n");
      out.write("const myDisp = document.querySelector(\"#disp\");\r\n");
      out.write("let imgArr1,imgArr2;\r\n");
      out.write("function fGetWeather(){\r\n");
      out.write("    //let schURL = `https://weather.naver.com`;\r\n");
      out.write("    let schURL = \"/zzang/csi/test\";\r\n");
      out.write("\r\n");
      out.write("    let xhr = new XMLHttpRequest();\r\n");
      out.write("    xhr.open(\"get\",schURL,true);\r\n");
      out.write("\r\n");
      out.write("    xhr.onreadystatechange = ()=>{\r\n");
      out.write("        if(xhr.readyState == 4 && xhr.status == 200){\r\n");
      out.write("            let cont = xhr.responseText;\r\n");
      out.write("            console.log(cont);\r\n");
      out.write("            myDisp.innerHTML = \"\";\r\n");
      out.write("\r\n");
      out.write("           // myDisp.innerHTML=cont;\r\n");
      out.write("\r\n");
      out.write("            \r\n");
      out.write("            // 날씨 정보\r\n");
      out.write("            let startIndex = cont.indexOf(\"weather_area\");\r\n");
      out.write("            let endIndex = startIndex;\r\n");
      out.write("            let content=\"\";\r\n");
      out.write("            for(let i=1; i<=2;i++){\r\n");
      out.write("                endIndex = cont.indexOf(\"</div>\",endIndex)+6;\r\n");
      out.write("              //  console.log(\"체킁:\",cont.substring(startIndex+14,endIndex));\r\n");
      out.write("                content = cont.substring(startIndex+14,endIndex);\r\n");
      out.write("            }\r\n");
      out.write("            myDisp.innerHTML = content;\r\n");
      out.write("\r\n");
      out.write("            // 위치정보\r\n");
      out.write("            startIndex = cont.indexOf(\"location_name\")+15;\r\n");
      out.write("            endIndex = cont.indexOf(\"</strong>\",startIndex);\r\n");
      out.write("            myDisp.innerHTML += \"<div>\" + cont.substring(startIndex,endIndex) + \"</div>\";\r\n");
      out.write("            \r\n");
      out.write("            // 위성사진1\r\n");
      out.write("            startIndex = cont.indexOf('[\"https://search.pstatic.net/common?');\r\n");
      out.write("            endIndex = cont.indexOf('\"]',startIndex);\r\n");
      out.write("            imgArr1 = JSON.parse(cont.substring(startIndex,endIndex+2));\r\n");
      out.write("            console.log(imgArr1);\r\n");
      out.write("            myDisp.innerHTML += `<img id=\"img1\" width=400 height=400 src=\"${imgArr1[0]}\">`;\r\n");
      out.write("\r\n");
      out.write("            // 위성사진2\r\n");
      out.write("            startIndex = cont.indexOf('[\"https://search.pstatic.net/common?',endIndex);\r\n");
      out.write("            endIndex = cont.indexOf('\"]',startIndex);\r\n");
      out.write("            imgArr2 = JSON.parse(cont.substring(startIndex,endIndex+2));\r\n");
      out.write("            console.log(imgArr2);\r\n");
      out.write("            myDisp.innerHTML += `<img  id=\"img2\" width=400 height=400 src=\"${imgArr2[0]}\">`;\r\n");
      out.write("            imgRotate();\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("    xhr.send();\r\n");
      out.write("}\r\n");
      out.write("fGetWeather();\r\n");
      out.write("\r\n");
      out.write("let pIndex1=0,pIndex2=0;\r\n");
      out.write("function imgRotate(){\r\n");
      out.write("     myDisp.querySelector(\"#img1\").src=imgArr1[pIndex1];\r\n");
      out.write("     myDisp.querySelector(\"#img2\").src=imgArr2[pIndex2];\r\n");
      out.write("     pIndex1++;\r\n");
      out.write("     if(pIndex1 > (imgArr1.length -1)) pIndex1 =0;\r\n");
      out.write("     pIndex2++;\r\n");
      out.write("     if(pIndex2 > (imgArr2.length -1)) pIndex2 =0;\r\n");
      out.write("    setTimeout(imgRotate,500);\r\n");
      out.write("}\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
