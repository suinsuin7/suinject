/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-08-23 02:08:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class suin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>수인 restful 클라이언트</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"disp\"></div>\r\n");
      out.write("<hr>\r\n");
      out.write("<form>\r\n");
      out.write("    타이틀 <input type=\"text\" name=\"title\"><br>\r\n");
      out.write("    이름 <input type=\"text\" name=\"sname\"><br>\r\n");
      out.write("    내용 <textarea name=\"scont\"></textarea><br>\r\n");
      out.write("  <!-- button 태그는 form태그 안에 있음 기본 type이 submit이 됨 -->\r\n");
      out.write("    <button type=\"button\" onclick=\"fSearch()\">조회</button>\r\n");
      out.write("    <button type=\"button\" onclick=\"fModify()\">수정</button>\r\n");
      out.write("    <button type=\"button\" onclick=\"fDel()\">삭제</button>\r\n");
      out.write("    <button type=\"button\" onclick=\"fInsert()\">입력</button>\r\n");
      out.write("</form>\r\n");
      out.write("<script>\r\n");
      out.write("//타이틀로 조회\r\n");
      out.write("function fInsert(){\r\n");
      out.write("    //넘겨야 할 data\r\n");
      out.write("    let susuVO = {\r\n");
      out.write("        title: myTitle.value,\r\n");
      out.write("        sname: myName.value,\r\n");
      out.write("        scont: myCont.value\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("	let xhr = new XMLHttpRequest();\r\n");
      out.write("    xhr.open(\"post\", \"/zzang/rest/suin\", true);\r\n");
      out.write("    xhr.setRequestHeader(\"Content-Type\",\"application/json;charset=utf-8\");\r\n");
      out.write("    xhr.onreadystatechange = function(){\r\n");
      out.write("        if (xhr.readyState == 4 && xhr.status == 200) {\r\n");
      out.write("           if(xhr.responseText) {\r\n");
      out.write("            alert(\"입력 성공\");\r\n");
      out.write("            getList();\r\n");
      out.write("           } else {\r\n");
      out.write("            alert(\"입력 실패\");\r\n");
      out.write("           }\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("    xhr.send(JSON.stringify(susuVO)); // 문자열(json형식의 문자열)\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function fSearch(){\r\n");
      out.write("	let xhr = new XMLHttpRequest();\r\n");
      out.write("    let schURL = `/zzang/rest/suin/${myTitle.value}`\r\n");
      out.write("    xhr.open(\"post\", schURL, true);\r\n");
      out.write("    xhr.onreadystatechange = function(){\r\n");
      out.write("        if (xhr.readyState == 4 && xhr.status == 200) {\r\n");
      out.write("            let susuVO = xhr.responseText;\r\n");
      out.write("            if (susuVO){\r\n");
      out.write("                susuVO = JSON.parse(susuVO); // json 문자열을 json 객체로\r\n");
      out.write("                myName.value = susuVO.sname;\r\n");
      out.write("                myCont.value = susuVO.scont;\r\n");
      out.write("            } else {\r\n");
      out.write("                alert(\"찾는 타이틀은 없어용\");\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("    xhr.send();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function fDel(){\r\n");
      out.write("\r\n");
      out.write("	let xhr = new XMLHttpRequest();\r\n");
      out.write("    let delURL = `/zzang/rest/suin/${myTitle.value}`\r\n");
      out.write("    xhr.open(\"delete\", delURL, true);\r\n");
      out.write("    xhr.onreadystatechange = function(){\r\n");
      out.write("        if (xhr.readyState == 4 && xhr.status == 200) {\r\n");
      out.write("            console.log(\"체크\", xhr.responseText);\r\n");
      out.write("            getList();\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("    xhr.send();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function fModify(){\r\n");
      out.write("    //넘겨야 할 data\r\n");
      out.write("    let susuVO = {\r\n");
      out.write("        title: myTitle.value,\r\n");
      out.write("        sname: myName.value,\r\n");
      out.write("        scont: myCont.value\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("	let xhr = new XMLHttpRequest();\r\n");
      out.write("    xhr.open(\"put\", \"/zzang/rest/suin\", true);\r\n");
      out.write("    xhr.setRequestHeader(\"Content-Type\",\"application/json;charset=utf-8\");\r\n");
      out.write("    xhr.onreadystatechange = function(){\r\n");
      out.write("        if (xhr.readyState == 4 && xhr.status == 200) {\r\n");
      out.write("            console.log(\"체크\", xhr.responseText);\r\n");
      out.write("            getList();\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("    xhr.send(JSON.stringify(susuVO)); // 문자열(json형식의 문자열)\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("const myList = document.querySelector(\"#disp\");\r\n");
      out.write("const myTitle = document.querySelector(\"input[name=title]\");\r\n");
      out.write("const myName = document.querySelector(\"input[name=sname]\");\r\n");
      out.write("const myCont = document.querySelector(\"textarea[name=scont]\");\r\n");
      out.write("\r\n");
      out.write("//TR 마우스 오버\r\n");
      out.write("function fmover(pthis){\r\n");
      out.write("    pthis.style.backgroundColor = \"black\";\r\n");
      out.write("    pthis.style.color=\"yellow\";\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//TR 마우스 아웃\r\n");
      out.write("function fmout(pthis){\r\n");
      out.write("    pthis.style.backgroundColor = \"white\";\r\n");
      out.write("    pthis.style.color=\"black\";\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//Tr 클릭시\r\n");
      out.write("function fmclick(pthis){\r\n");
      out.write("    myTitle.value = pthis.children[0].innerHTML;\r\n");
      out.write("    myName.value = pthis.children[1].innerHTML;\r\n");
      out.write("    myCont.value = pthis.children[2].innerHTML;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 리스트 가져다 뿌리기\r\n");
      out.write("const getList = () => {\r\n");
      out.write("    let xhr = new XMLHttpRequest();\r\n");
      out.write("    xhr.open(\"get\",\"/zzang/rest/suins\",true);\r\n");
      out.write("    xhr.onreadystatechange = () => {\r\n");
      out.write("        if (xhr.readyState == 4 && xhr.status == 200) {\r\n");
      out.write("            //json 문자열을 json객체로 바꿔야 편하게 쓸 수 있음\r\n");
      out.write("            let rslt = JSON.parse(xhr.responseText);\r\n");
      out.write("\r\n");
      out.write("            let tblStr = \"<table border=1>\";\r\n");
      out.write("                tblStr += \"<tr><th>타이틀</th><th>이름</th><th>내용</th></tr>\";\r\n");
      out.write("            for(let i=0; i<rslt.length; i++) {\r\n");
      out.write("                tblStr += `<tr onmouseover=fmover(this) onmouseout=fmout(this) onclick=fmclick(this)>`;\r\n");
      out.write("                tblStr += `<td>${rslt[i].title}</td>`;\r\n");
      out.write("                tblStr += `<td>${rslt[i].sname}</td>`;\r\n");
      out.write("                tblStr += `<td>${rslt[i].scont}</td>`;\r\n");
      out.write("                tblStr += `</tr>`;\r\n");
      out.write("            }\r\n");
      out.write("            tblStr += \"</table>\";\r\n");
      out.write("            myList.innerHTML = tblStr;\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("    xhr.send();\r\n");
      out.write("}\r\n");
      out.write("getList();\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
